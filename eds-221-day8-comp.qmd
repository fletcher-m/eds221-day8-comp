---
title: "eds-221-day8-comp"
format: html
editor: visual
---

## Review Basics of GGPLOT

```{r}
library(tidyverse)
library(here)
library(janitor)

library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(gapminder)
library(sf)
```

```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

Do some data wrangling to create a new subset from lizards where you:

1\) Limit the data to only contain western whiptails, colorado checkered, and eastern fence lizards

2\) Add a new column with total length converted to cm

3\) Group by species and site

4\) Return a summary table with mean total length and standard deviation of total length by species and site

```{r}
lizards_subset <- lizards |> 
  filter(common_name == "western whiptail" | common_name == "colorado checkered" | common_name == "eastern fence") |> 
  mutate(total_length_cm = total_length / 10) |> 
  group_by(common_name, site) |> 
  summarize(mean_length_cm = mean(total_length_cm, na.rm = TRUE),
            sd_length_cm = sd(total_length_cm, na.rm = TRUE))
  
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point(aes(color = common_name)) +
  facet_wrap(~ common_name)
```

```{r}
# use dplyr::count to find the toal number of lizards by common name in the lizards data set

lizard_counts <- lizards |> count(common_name)

```

```{r}
# used fct_reorder() to convert common_name values to factors and then ordered them from most to least

ggplot(data = lizard_counts, aes(y = fct_reorder(common_name, -n), x = n)) +
  geom_col(aes(fill = common_name)) 
```

```{r}
# same graph as above

ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point(aes(color = weight)) +
  scale_y_continuous(limits = c(0, 100),
                     breaks = seq(from = 0, to = 100, by = 20),
                     expand = c(0, 0)) +
  scale_color_gradient(low = "yellow", high = "red")

# or can do scale_color_gradient(colors = c("yellow", "orange", "purple"))
                     
```

```{r}
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap)) +
  geom_point() +
  annotate("text", x = 40, y = 90000, label = "A LABEL") +
  geom_hline(yintercept = 70000, linetype = "dotted", color = "blue") +
  geom_vline(xintercept = mean(gapminder$lifeExp)) 
```

```{r}
# this is an example of piping directly into ggplot
gapminder |> 
  filter(year == 2002 & continent == "Europe") |> 
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point(shape = 23, size = 4, color = "blue", fill = "red") +
  geom_text_repel(aes(label = country))
```

```{r}
# same as above graph
# check out gghighlight while commenting out the geom_text_repel line
gapminder |> 
  filter(year == 2002 & continent == "Europe") |> 
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point() +
  geom_text_repel(aes(label = country)) +
  gghighlight(country == "Poland", label_key = country)
```

Create a ggplot chart using data only from 2007, then highlight all countries in Europe, adding their country name as the label (using the same x and y variables as above)

```{r}
gapminder |> 
  filter(year == 2007) |> 
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point() +
  geom_text_repel(aes(label = country)) +
  gghighlight(continent == "Europe")
```

```{r}
# select() says only keep name column but the spatial component is stuck to it (another column)
# paletteer will change the color palett
jornada_veg <- read_sf(here("data_raw", "spatial_vegetation", "doc.kml")) |> 
  select(name = Name)

# could have panel.grid.major to just update color of major grid lines
ggplot() +
  geom_sf(data = jornada_veg, aes(fill = name), color = NA) +
  theme_minimal() +
  scale_fill_paletteer_d(palette = "ggthemes::manyeys") +
  theme(panel.background = element_rect(color = "purple", size = 5, fill = "pink"),
        plot.background = element_rect(fill = "yellow"),
        panel.grid = element_line(color = "blue"),
        axis.text.x = element_text(color = "black"))
```

```{r}

```
